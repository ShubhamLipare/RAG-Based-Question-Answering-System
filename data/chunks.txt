Provided proper attribution is provided, Google hereby grants permission to
reproduce the tables and figures in this paper solely for use in journalistic or
scholarly works.
Attention Is All You Need
Ashish Vaswani∗
Google Brain
avaswani@google.comNoam Shazeer∗
Google Brain
noam@google.comNiki Parmar∗
Google Research
nikip@google.comJakob Uszkoreit∗
Google Research
usz@google.com
Llion Jones∗
Google Research
llion@google.comAidan N. Gomez∗ †
University of Toronto
aidan@cs.toronto.eduŁukasz Kaiser∗
Google Brain
lukaszkaiser@google.com
Illia Polosukhin∗ ‡
illia.polosukhin@gmail.com
Abstract
The dominant sequence transduction models are based on complex recurrent or
convolutional neural networks that include an encoder and a decoder. The best
performing models also connect the encoder and decoder through an attention
mechanism. We propose a new simple network architecture, the Transformer,
based solely on attention mechanisms, dispensing with recurrence and convolutionsmechanism. We propose a new simple network architecture, the Transformer,
based solely on attention mechanisms, dispensing with recurrence and convolutions
entirely. Experiments on two machine translation tasks show these models to
be superior in quality while being more parallelizable and requiring significantly
less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-
to-German translation task, improving over the existing best results, including
ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,
our model establishes a new single-model state-of-the-art BLEU score of 41.8 after
training for 3.5 days on eight GPUs, a small fraction of the training costs of the
best models from the literature. We show that the Transformer generalizes well to
other tasks by applying it successfully to English constituency parsing both with
large and limited training data.
∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and startedlarge and limited training data.
∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started
the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and
has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head
attention and the parameter-free position representation and became the other person involved in nearly every
detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and
tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and
efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and
implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating
our research.
†Work performed while at Google Brain.
‡Work performed while at Google Research.our research.
†Work performed while at Google Brain.
‡Work performed while at Google Research.
31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.arXiv:1706.03762v7  [cs.CL]  2 Aug 2023
1 Introduction
Recurrent neural networks, long short-term memory [ 13] and gated recurrent [ 7] neural networks
in particular, have been firmly established as state of the art approaches in sequence modeling and
transduction problems such as language modeling and machine translation [ 35,2,5]. Numerous
efforts have since continued to push the boundaries of recurrent language models and encoder-decoder
architectures [38, 24, 15].
Recurrent models typically factor computation along the symbol positions of the input and output
sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden
states ht, as a function of the previous hidden state ht−1and the input for position t. This inherentlystates ht, as a function of the previous hidden state ht−1and the input for position t. This inherently
sequential nature precludes parallelization within training examples, which becomes critical at longer
sequence lengths, as memory constraints limit batching across examples. Recent work has achieved
significant improvements in computational efficiency through factorization tricks [ 21] and conditional
computation [ 32], while also improving model performance in case of the latter. The fundamental
constraint of sequential computation, however, remains.
Attention mechanisms have become an integral part of compelling sequence modeling and transduc-
tion models in various tasks, allowing modeling of dependencies without regard to their distance in
the input or output sequences [ 2,19]. In all but a few cases [ 27], however, such attention mechanisms
are used in conjunction with a recurrent network.
In this work we propose the Transformer, a model architecture eschewing recurrence and insteadare used in conjunction with a recurrent network.
In this work we propose the Transformer, a model architecture eschewing recurrence and instead
relying entirely on an attention mechanism to draw global dependencies between input and output.
The Transformer allows for significantly more parallelization and can reach a new state of the art in
translation quality after being trained for as little as twelve hours on eight P100 GPUs.
2 Background
The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU
[16], ByteNet [ 18] and ConvS2S [ 9], all of which use convolutional neural networks as basic building
block, computing hidden representations in parallel for all input and output positions. In these models,
the number of operations required to relate signals from two arbitrary input or output positions grows
in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makesin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes
it more difficult to learn dependencies between distant positions [ 12]. In the Transformer this is
reduced to a constant number of operations, albeit at the cost of reduced effective resolution due
to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as
described in section 3.2.
Self-attention, sometimes called intra-attention is an attention mechanism relating different positions
of a single sequence in order to compute a representation of the sequence. Self-attention has been
used successfully in a variety of tasks including reading comprehension, abstractive summarization,
textual entailment and learning task-independent sentence representations [4, 27, 28, 22].
End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-
aligned recurrence and have been shown to perform well on simple-language question answering andEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequence-
aligned recurrence and have been shown to perform well on simple-language question answering and
language modeling tasks [34].
To the best of our knowledge, however, the Transformer is the first transduction model relying
entirely on self-attention to compute representations of its input and output without using sequence-
aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate
self-attention and discuss its advantages over models such as [17, 18] and [9].
3 Model Architecture
Most competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,35].
Here, the encoder maps an input sequence of symbol representations (x1, ..., x n)to a sequence
of continuous representations z= (z1, ..., z n). Given z, the decoder then generates an output
sequence (y1, ..., y m)of symbols one element at a time. At each step the model is auto-regressiveof continuous representations z= (z1, ..., z n). Given z, the decoder then generates an output
sequence (y1, ..., y m)of symbols one element at a time. At each step the model is auto-regressive
[10], consuming the previously generated symbols as additional input when generating the next.
2
Figure 1: The Transformer - model architecture.
The Transformer follows this overall architecture using stacked self-attention and point-wise, fully
connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,
respectively.
3.1 Encoder and Decoder Stacks
Encoder: The encoder is composed of a stack of N= 6 identical layers. Each layer has two
sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-
wise fully connected feed-forward network. We employ a residual connection [ 11] around each of
the two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer iswise fully connected feed-forward network. We employ a residual connection [ 11] around each of
the two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is
LayerNorm( x+ Sublayer( x)), where Sublayer( x)is the function implemented by the sub-layer
itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding
layers, produce outputs of dimension dmodel = 512 .
Decoder: The decoder is also composed of a stack of N= 6identical layers. In addition to the two
sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head
attention over the output of the encoder stack. Similar to the encoder, we employ residual connections
around each of the sub-layers, followed by layer normalization. We also modify the self-attention
sub-layer in the decoder stack to prevent positions from attending to subsequent positions. Thisaround each of the sub-layers, followed by layer normalization. We also modify the self-attention
sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This
masking, combined with fact that the output embeddings are offset by one position, ensures that the
predictions for position ican depend only on the known outputs at positions less than i.
3.2 Attention
An attention function can be described as mapping a query and a set of key-value pairs to an output,
where the query, keys, values, and output are all vectors. The output is computed as a weighted sum
3
Scaled Dot-Product Attention
 Multi-Head Attention
Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several
attention layers running in parallel.
of the values, where the weight assigned to each value is computed by a compatibility function of the
query with the corresponding key.
3.2.1 Scaled Dot-Product Attentionof the values, where the weight assigned to each value is computed by a compatibility function of the
query with the corresponding key.
3.2.1 Scaled Dot-Product Attention
We call our particular attention "Scaled Dot-Product Attention" (Figure 2). The input consists of
queries and keys of dimension dk, and values of dimension dv. We compute the dot products of the
query with all keys, divide each by√dk, and apply a softmax function to obtain the weights on the
values.
In practice, we compute the attention function on a set of queries simultaneously, packed together
into a matrix Q. The keys and values are also packed together into matrices KandV. We compute
the matrix of outputs as:
Attention( Q, K, V ) = softmax(QKT
√dk)V (1)
The two most commonly used attention functions are additive attention [ 2], and dot-product (multi-
plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factorplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor
of1√dk. Additive attention computes the compatibility function using a feed-forward network with
a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is
much faster and more space-efficient in practice, since it can be implemented using highly optimized
matrix multiplication code.
While for small values of dkthe two mechanisms perform similarly, additive attention outperforms
dot product attention without scaling for larger values of dk[3]. We suspect that for large values of
dk, the dot products grow large in magnitude, pushing the softmax function into regions where it has
extremely small gradients4. To counteract this effect, we scale the dot products by1√dk.
3.2.2 Multi-Head Attention
Instead of performing a single attention function with dmodel-dimensional keys, values and queries,3.2.2 Multi-Head Attention
Instead of performing a single attention function with dmodel-dimensional keys, values and queries,
we found it beneficial to linearly project the queries, keys and values htimes with different, learned
linear projections to dk,dkanddvdimensions, respectively. On each of these projected versions of
queries, keys and values we then perform the attention function in parallel, yielding dv-dimensional
4To illustrate why the dot products get large, assume that the components of qandkare independent random
variables with mean 0and variance 1. Then their dot product, q·k=Pdk
i=1qiki, has mean 0and variance dk.
4
output values. These are concatenated and once again projected, resulting in the final values, as
depicted in Figure 2.
Multi-head attention allows the model to jointly attend to information from different representation
subspaces at different positions. With a single attention head, averaging inhibits this.
MultiHead( Q, K, V ) = Concat(head 1, ...,head h)WOsubspaces at different positions. With a single attention head, averaging inhibits this.
MultiHead( Q, K, V ) = Concat(head 1, ...,head h)WO
where head i= Attention( QWQ
i, KWK
i, V WV
i)
Where the projections are parameter matrices WQ
i∈Rdmodel×dk,WK
i∈Rdmodel×dk,WV
i∈Rdmodel×dv
andWO∈Rhdv×dmodel.
In this work we employ h= 8 parallel attention layers, or heads. For each of these we use
dk=dv=dmodel/h= 64 . Due to the reduced dimension of each head, the total computational cost
is similar to that of single-head attention with full dimensionality.
3.2.3 Applications of Attention in our Model
The Transformer uses multi-head attention in three different ways:
•In "encoder-decoder attention" layers, the queries come from the previous decoder layer,
and the memory keys and values come from the output of the encoder. This allows every
position in the decoder to attend over all positions in the input sequence. This mimics the
typical encoder-decoder attention mechanisms in sequence-to-sequence models such asposition in the decoder to attend over all positions in the input sequence. This mimics the
typical encoder-decoder attention mechanisms in sequence-to-sequence models such as
[38, 2, 9].
•The encoder contains self-attention layers. In a self-attention layer all of the keys, values
and queries come from the same place, in this case, the output of the previous layer in the
encoder. Each position in the encoder can attend to all positions in the previous layer of the
encoder.
•Similarly, self-attention layers in the decoder allow each position in the decoder to attend to
all positions in the decoder up to and including that position. We need to prevent leftward
information flow in the decoder to preserve the auto-regressive property. We implement this
inside of scaled dot-product attention by masking out (setting to −∞) all values in the input
of the softmax which correspond to illegal connections. See Figure 2.
3.3 Position-wise Feed-Forward Networksof the softmax which correspond to illegal connections. See Figure 2.
3.3 Position-wise Feed-Forward Networks
In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully
connected feed-forward network, which is applied to each position separately and identically. This
consists of two linear transformations with a ReLU activation in between.
FFN( x) = max(0 , xW 1+b1)W2+b2 (2)
While the linear transformations are the same across different positions, they use different parameters
from layer to layer. Another way of describing this is as two convolutions with kernel size 1.
The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality
dff= 2048 .
3.4 Embeddings and Softmax
Similarly to other sequence transduction models, we use learned embeddings to convert the input
tokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-Similarly to other sequence transduction models, we use learned embeddings to convert the input
tokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-
mation and softmax function to convert the decoder output to predicted next-token probabilities. In
our model, we share the same weight matrix between the two embedding layers and the pre-softmax
linear transformation, similar to [ 30]. In the embedding layers, we multiply those weights by√dmodel.
5
Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations
for different layer types. nis the sequence length, dis the representation dimension, kis the kernel
size of convolutions and rthe size of the neighborhood in restricted self-attention.
Layer Type Complexity per Layer Sequential Maximum Path Length
Operations
Self-Attention O(n2·d) O(1) O(1)
Recurrent O(n·d2) O(n) O(n)
Convolutional O(k·n·d2) O(1) O(logk(n))
Self-Attention (restricted) O(r·n·d) O(1) O(n/r)Operations
Self-Attention O(n2·d) O(1) O(1)
Recurrent O(n·d2) O(n) O(n)
Convolutional O(k·n·d2) O(1) O(logk(n))
Self-Attention (restricted) O(r·n·d) O(1) O(n/r)
3.5 Positional Encoding
Since our model contains no recurrence and no convolution, in order for the model to make use of the
order of the sequence, we must inject some information about the relative or absolute position of the
tokens in the sequence. To this end, we add "positional encodings" to the input embeddings at the
bottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel
as the embeddings, so that the two can be summed. There are many choices of positional encodings,
learned and fixed [9].
In this work, we use sine and cosine functions of different frequencies:
PE(pos,2i)=sin(pos/100002i/d model)
PE(pos,2i+1)=cos(pos/100002i/d model)
where posis the position and iis the dimension. That is, each dimension of the positional encodingPE(pos,2i)=sin(pos/100002i/d model)
PE(pos,2i+1)=cos(pos/100002i/d model)
where posis the position and iis the dimension. That is, each dimension of the positional encoding
corresponds to a sinusoid. The wavelengths form a geometric progression from 2πto10000 ·2π. We
chose this function because we hypothesized it would allow the model to easily learn to attend by
relative positions, since for any fixed offset k,PEpos+kcan be represented as a linear function of
PEpos.
We also experimented with using learned positional embeddings [ 9] instead, and found that the two
versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version
because it may allow the model to extrapolate to sequence lengths longer than the ones encountered
during training.
4 Why Self-Attention
In this section we compare various aspects of self-attention layers to the recurrent and convolu-
tional layers commonly used for mapping one variable-length sequence of symbol representationsIn this section we compare various aspects of self-attention layers to the recurrent and convolu-
tional layers commonly used for mapping one variable-length sequence of symbol representations
(x1, ..., x n)to another sequence of equal length (z1, ..., z n), with xi, zi∈Rd, such as a hidden
layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we
consider three desiderata.
One is the total computational complexity per layer. Another is the amount of computation that can
be parallelized, as measured by the minimum number of sequential operations required.
The third is the path length between long-range dependencies in the network. Learning long-range
dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the
ability to learn such dependencies is the length of the paths forward and backward signals have to
traverse in the network. The shorter these paths between any combination of positions in the inputability to learn such dependencies is the length of the paths forward and backward signals have to
traverse in the network. The shorter these paths between any combination of positions in the input
and output sequences, the easier it is to learn long-range dependencies [ 12]. Hence we also compare
the maximum path length between any two input and output positions in networks composed of the
different layer types.
As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially
executed operations, whereas a recurrent layer requires O(n)sequential operations. In terms of
computational complexity, self-attention layers are faster than recurrent layers when the sequence
6
length nis smaller than the representation dimensionality d, which is most often the case with
sentence representations used by state-of-the-art models in machine translations, such as word-piece
[38] and byte-pair [ 31] representations. To improve computational performance for tasks involvingsentence representations used by state-of-the-art models in machine translations, such as word-piece
[38] and byte-pair [ 31] representations. To improve computational performance for tasks involving
very long sequences, self-attention could be restricted to considering only a neighborhood of size rin
the input sequence centered around the respective output position. This would increase the maximum
path length to O(n/r). We plan to investigate this approach further in future work.
A single convolutional layer with kernel width k < n does not connect all pairs of input and output
positions. Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,
orO(logk(n))in the case of dilated convolutions [ 18], increasing the length of the longest paths
between any two positions in the network. Convolutional layers are generally more expensive than
recurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexitybetween any two positions in the network. Convolutional layers are generally more expensive than
recurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity
considerably, to O(k·n·d+n·d2). Even with k=n, however, the complexity of a separable
convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,
the approach we take in our model.
As side benefit, self-attention could yield more interpretable models. We inspect attention distributions
from our models and present and discuss examples in the appendix. Not only do individual attention
heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic
and semantic structure of the sentences.
5 Training
This section describes the training regime for our models.
5.1 Training Data and Batching
We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million5 Training
This section describes the training regime for our models.
5.1 Training Data and Batching
We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million
sentence pairs. Sentences were encoded using byte-pair encoding [ 3], which has a shared source-
target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT
2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece
vocabulary [ 38]. Sentence pairs were batched together by approximate sequence length. Each training
batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000
target tokens.
5.2 Hardware and Schedule
We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using
the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We
trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on thetrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the
bottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps
(3.5 days).
5.3 Optimizer
We used the Adam optimizer [ 20] with β1= 0.9,β2= 0.98andϵ= 10−9. We varied the learning
rate over the course of training, according to the formula:
lrate =d−0.5
model·min(step_num−0.5, step _num·warmup _steps−1.5) (3)
This corresponds to increasing the learning rate linearly for the first warmup _steps training steps,
and decreasing it thereafter proportionally to the inverse square root of the step number. We used
warmup _steps = 4000 .
5.4 Regularization
We employ three types of regularization during training:
7
Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the
English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.
ModelBLEU Training Cost (FLOPs)
EN-DE EN-FR EN-DE EN-FR
ByteNet [18] 23.75English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.
ModelBLEU Training Cost (FLOPs)
EN-DE EN-FR EN-DE EN-FR
ByteNet [18] 23.75
Deep-Att + PosUnk [39] 39.2 1.0·1020
GNMT + RL [38] 24.6 39.92 2.3·10191.4·1020
ConvS2S [9] 25.16 40.46 9.6·10181.5·1020
MoE [32] 26.03 40.56 2.0·10191.2·1020
Deep-Att + PosUnk Ensemble [39] 40.4 8.0·1020
GNMT + RL Ensemble [38] 26.30 41.16 1.8·10201.1·1021
ConvS2S Ensemble [9] 26.36 41.29 7.7·10191.2·1021
Transformer (base model) 27.3 38.1 3.3·1018
Transformer (big) 28.4 41.8 2.3·1019
Residual Dropout We apply dropout [ 33] to the output of each sub-layer, before it is added to the
sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the
positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of
Pdrop= 0.1.
Label Smoothing During training, we employed label smoothing of value ϵls= 0.1[36]. Thispositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of
Pdrop= 0.1.
Label Smoothing During training, we employed label smoothing of value ϵls= 0.1[36]. This
hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.
6 Results
6.1 Machine Translation
On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)
in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0
BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is
listed in the bottom line of Table 3. Training took 3.5days on 8P100 GPUs. Even our base model
surpasses all previously published models and ensembles, at a fraction of the training cost of any of
the competitive models.
On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,the competitive models.
On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,
outperforming all of the previously published single models, at less than 1/4the training cost of the
previous state-of-the-art model. The Transformer (big) model trained for English-to-French used
dropout rate Pdrop= 0.1, instead of 0.3.
For the base models, we used a single model obtained by averaging the last 5 checkpoints, which
were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We
used beam search with a beam size of 4and length penalty α= 0.6[38]. These hyperparameters
were chosen after experimentation on the development set. We set the maximum output length during
inference to input length + 50, but terminate early when possible [38].
Table 2 summarizes our results and compares our translation quality and training costs to other model
architectures from the literature. We estimate the number of floating point operations used to train aarchitectures from the literature. We estimate the number of floating point operations used to train a
model by multiplying the training time, the number of GPUs used, and an estimate of the sustained
single-precision floating-point capacity of each GPU5.
6.2 Model Variations
To evaluate the importance of different components of the Transformer, we varied our base model
in different ways, measuring the change in performance on English-to-German translation on the
5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.
8
Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base
model. All metrics are on the English-to-German translation development set, newstest2013. Listed
perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to
per-word perplexities.
N d model dff h d k dvPdrop ϵlstrain PPL BLEU params
steps (dev) (dev) ×106
base 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65per-word perplexities.
N d model dff h d k dvPdrop ϵlstrain PPL BLEU params
steps (dev) (dev) ×106
base 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65
(A)1 512 512 5.29 24.9
4 128 128 5.00 25.5
16 32 32 4.91 25.8
32 16 16 5.01 25.4
(B)16 5.16 25.1 58
32 5.01 25.4 60
(C)2 6.11 23.7 36
4 5.19 25.3 50
8 4.88 25.5 80
256 32 32 5.75 24.5 28
1024 128 128 4.66 26.0 168
1024 5.12 25.4 53
4096 4.75 26.2 90
(D)0.0 5.77 24.6
0.2 4.95 25.5
0.0 4.67 25.3
0.2 5.47 25.7
(E) positional embedding instead of sinusoids 4.92 25.7
big 6 1024 4096 16 0.3 300K 4.33 26.4 213
development set, newstest2013. We used beam search as described in the previous section, but no
checkpoint averaging. We present these results in Table 3.
In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,
keeping the amount of computation constant, as described in Section 3.2.2. While single-head
attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.keeping the amount of computation constant, as described in Section 3.2.2. While single-head
attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.
In Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. This
suggests that determining compatibility is not easy and that a more sophisticated compatibility
function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,
bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our
sinusoidal positional encoding with learned positional embeddings [ 9], and observe nearly identical
results to the base model.
6.3 English Constituency Parsing
To evaluate if the Transformer can generalize to other tasks we performed experiments on English
constituency parsing. This task presents specific challenges: the output is subject to strong structuralconstituency parsing. This task presents specific challenges: the output is subject to strong structural
constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence
models have not been able to attain state-of-the-art results in small-data regimes [37].
We trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the
Penn Treebank [ 25], about 40K training sentences. We also trained it in a semi-supervised setting,
using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences
[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens
for the semi-supervised setting.
We performed only a small number of experiments to select the dropout, both attention and residual
(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters
remained unchanged from the English-to-German base translation model. During inference, we
9(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters
remained unchanged from the English-to-German base translation model. During inference, we
9
Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23
of WSJ)
Parser Training WSJ 23 F1
Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3
Petrov et al. (2006) [29] WSJ only, discriminative 90.4
Zhu et al. (2013) [40] WSJ only, discriminative 90.4
Dyer et al. (2016) [8] WSJ only, discriminative 91.7
Transformer (4 layers) WSJ only, discriminative 91.3
Zhu et al. (2013) [40] semi-supervised 91.3
Huang & Harper (2009) [14] semi-supervised 91.3
McClosky et al. (2006) [26] semi-supervised 92.1
Vinyals & Kaiser el al. (2014) [37] semi-supervised 92.1
Transformer (4 layers) semi-supervised 92.7
Luong et al. (2015) [23] multi-task 93.0
Dyer et al. (2016) [8] generative 93.3Vinyals & Kaiser el al. (2014) [37] semi-supervised 92.1
Transformer (4 layers) semi-supervised 92.7
Luong et al. (2015) [23] multi-task 93.0
Dyer et al. (2016) [8] generative 93.3
increased the maximum output length to input length + 300. We used a beam size of 21andα= 0.3
for both WSJ only and the semi-supervised setting.
Our results in Table 4 show that despite the lack of task-specific tuning our model performs sur-
prisingly well, yielding better results than all previously reported models with the exception of the
Recurrent Neural Network Grammar [8].
In contrast to RNN sequence-to-sequence models [ 37], the Transformer outperforms the Berkeley-
Parser [29] even when training only on the WSJ training set of 40K sentences.
7 Conclusion
In this work, we presented the Transformer, the first sequence transduction model based entirely on
attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with
multi-headed self-attention.attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with
multi-headed self-attention.
For translation tasks, the Transformer can be trained significantly faster than architectures based
on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014
English-to-French translation tasks, we achieve a new state of the art. In the former task our best
model outperforms even all previously reported ensembles.
We are excited about the future of attention-based models and plan to apply them to other tasks. We
plan to extend the Transformer to problems involving input and output modalities other than text and
to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs
such as images, audio and video. Making generation less sequential is another research goals of ours.
The code we used to train and evaluate our models is available at https://github.com/
tensorflow/tensor2tensor .The code we used to train and evaluate our models is available at https://github.com/
tensorflow/tensor2tensor .
Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful
comments, corrections and inspiration.
References
[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint
arXiv:1607.06450 , 2016.
[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. CoRR , abs/1409.0473, 2014.
[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural
machine translation architectures. CoRR , abs/1703.03906, 2017.
[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine
reading. arXiv preprint arXiv:1601.06733 , 2016.
10
[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical10
[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,
and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical
machine translation. CoRR , abs/1406.1078, 2014.
[6]Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv
preprint arXiv:1610.02357 , 2016.
[7]Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation
of gated recurrent neural networks on sequence modeling. CoRR , abs/1412.3555, 2014.
[8]Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A. Smith. Recurrent neural
network grammars. In Proc. of NAACL , 2016.
[9]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-
tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2 , 2017.
[10] Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint
arXiv:1308.0850 , 2013.tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2 , 2017.
[10] Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint
arXiv:1308.0850 , 2013.
[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-
age recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition , pages 770–778, 2016.
[12] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient flow in
recurrent nets: the difficulty of learning long-term dependencies, 2001.
[13] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation ,
9(8):1735–1780, 1997.
[14] Zhongqiang Huang and Mary Harper. Self-training PCFG grammars with latent annotations
across languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural
Language Processing , pages 832–841. ACL, August 2009.
[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ExploringLanguage Processing , pages 832–841. ACL, August 2009.
[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring
the limits of language modeling. arXiv preprint arXiv:1602.02410 , 2016.
[16] Łukasz Kaiser and Samy Bengio. Can active memory replace attention? In Advances in Neural
Information Processing Systems, (NIPS) , 2016.
[17] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference
on Learning Representations (ICLR) , 2016.
[18] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-
ray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2 ,
2017.
[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.
InInternational Conference on Learning Representations , 2017.
[20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR , 2015.InInternational Conference on Learning Representations , 2017.
[20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR , 2015.
[21] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint
arXiv:1703.10722 , 2017.
[22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen
Zhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprint
arXiv:1703.03130 , 2017.
[23] Minh-Thang Luong, Quoc V . Le, Ilya Sutskever, Oriol Vinyals, and Lukasz Kaiser. Multi-task
sequence to sequence learning. arXiv preprint arXiv:1511.06114 , 2015.
[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-
based neural machine translation. arXiv preprint arXiv:1508.04025 , 2015.
11
[25] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated
corpus of english: The penn treebank. Computational linguistics , 19(2):313–330, 1993.11
[25] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated
corpus of english: The penn treebank. Computational linguistics , 19(2):313–330, 1993.
[26] David McClosky, Eugene Charniak, and Mark Johnson. Effective self-training for parsing. In
Proceedings of the Human Language Technology Conference of the NAACL, Main Conference ,
pages 152–159. ACL, June 2006.
[27] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention
model. In Empirical Methods in Natural Language Processing , 2016.
[28] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive
summarization. arXiv preprint arXiv:1705.04304 , 2017.
[29] Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. Learning accurate, compact,
and interpretable tree annotation. In Proceedings of the 21st International Conference on
Computational Linguistics and 44th Annual Meeting of the ACL , pages 433–440. ACL, July
2006.and interpretable tree annotation. In Proceedings of the 21st International Conference on
Computational Linguistics and 44th Annual Meeting of the ACL , pages 433–440. ACL, July
2006.
[30] Ofir Press and Lior Wolf. Using the output embedding to improve language models. arXiv
preprint arXiv:1608.05859 , 2016.
[31] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words
with subword units. arXiv preprint arXiv:1508.07909 , 2015.
[32] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,
and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts
layer. arXiv preprint arXiv:1701.06538 , 2017.
[33] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-
nov. Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine
Learning Research , 15(1):1929–1958, 2014.
[34] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memoryLearning Research , 15(1):1929–1958, 2014.
[34] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory
networks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,
Advances in Neural Information Processing Systems 28 , pages 2440–2448. Curran Associates,
Inc., 2015.
[35] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural
networks. In Advances in Neural Information Processing Systems , pages 3104–3112, 2014.
[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.
Rethinking the inception architecture for computer vision. CoRR , abs/1512.00567, 2015.
[37] Vinyals & Kaiser, Koo, Petrov, Sutskever, and Hinton. Grammar as a foreign language. In
Advances in Neural Information Processing Systems , 2015.
[38] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang
Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine[38] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang
Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine
translation system: Bridging the gap between human and machine translation. arXiv preprint
arXiv:1609.08144 , 2016.
[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with
fast-forward connections for neural machine translation. CoRR , abs/1606.04199, 2016.
[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate
shift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume
1: Long Papers) , pages 434–443. ACL, August 2013.
12
Attention Visualizations
Input-Input Layer5
It
is
in
this
spirit
that
a
majority
of
American
governments
have
passed
new
laws
since
2009
making
the
registration
or
voting
process
more
difficult
.
<EOS>
<pad>
<pad>
<pad>
<pad>
<pad>
<pad>
It
is
in
this
spirit
that
a
majority
of
American
governments
have
passed
new
lawslaws
since
2009
making
the
registration
or
voting
process
more
difficult
.
<EOS>
<pad>
<pad>
<pad>
<pad>
<pad>
<pad>
It
is
in
this
spirit
that
a
majority
of
American
governments
have
passed
new
laws
since
2009
making
the
registration
or
voting
process
more
difficult
.
<EOS>
<pad>
<pad>
<pad>
<pad>
<pad>
<pad>
Figure 3: An example of the attention mechanism following long-distance dependencies in the
encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of
the verb ‘making’, completing the phrase ‘making...more difficult’. Attentions here shown only for
the word ‘making’. Different colors represent different heads. Best viewed in color.
13
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>Figure 4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top:
Full attentions for head 5. Bottom: Isolated attentions from just the word ‘its’ for attention heads 5
and 6. Note that the attentions are very sharp for this word.
14
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
Input-Input Layer5
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>
The
Law
will
never
be
perfect
,
but
its
application
should
be
just
-
this
is
what
we
are
missing
,
in
my
opinion
.
<EOS>
<pad>Figure 5: Many of the attention heads exhibit behaviour that seems related to the structure of the
sentence. We give two such examples above, from two different heads from the encoder self-attention
at layer 5 of 6. The heads clearly learned to perform different tasks.
15
1 | P a g e  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Instagram2 | P a g e  
 Contents  
Generic Questions  ................................ ................................ ................................ ...........................  3 
Generative AI  ................................ ................................ ................................ ................................ .. 7 
Discriminative AI  ................................ ................................ ................................ .............................  9 
General Questions on Generative and Discriminative AI  ................................ ...............................  9 
Transformer Architecture  ................................ ................................ ................................ .............  11 
Large Language Models (LLMs)  ................................ ................................ ................................ ..... 13Large Language Models (LLMs)  ................................ ................................ ................................ ..... 13 
Embedding Models  ................................ ................................ ................................ .......................  15 
Retrieval -Augmented Generation (RAG)  ................................ ................................ ......................  16 
LLM Fine Tuning  ................................ ................................ ................................ ............................  17 
Misc Topics in Generative AI  ................................ ................................ ................................ .........  18 
Prompt Engineering  ................................ ................................ ................................ ......................  20 
One-Shot Prompting  ................................ ................................ ................................ .....................  25One-Shot Prompting  ................................ ................................ ................................ .....................  25 
Few-Shot Prompting  ................................ ................................ ................................ .....................  26 
Zero -Shot Prompting  ................................ ................................ ................................ .....................  26 
Chain of Thought Prompting  ................................ ................................ ................................ .........  26 
Hybrid Prompting  ................................ ................................ ................................ ..........................  28 
ReAct Prompting  ................................ ................................ ................................ ...........................  29 
 
 
 
 
 
 
 
 
 
 
 
3 | P a g e  
 Generic Questions  
Q: What is Generative AI?3 | P a g e  
 Generic Questions  
Q: What is Generative AI?  
A: Generative AI refers to a class of artificial intelligence models that can generate new data 
or content based on the data they were trained on. These models can create text, images, 
audio, and more.  
Q: How does a Generative Adversarial Network (GAN) work?  
A: A GAN consists of two neural networks: a generator and a discriminator. The generator 
creates fake data, while the discriminator tries to distinguish between real and fake data. Both 
networks are trained simultaneously in a game -like scenario where the ge nerator improves its 
ability to create realistic data, and the discriminator gets better at detecting fakes.  
 
GAN (Source - Geek sForGeeks)  
Q: What is a Transformer model?  
A: A Transformer model is a type of deep learning architecture introduced in the paper 
"Attention is All You Need." It uses self -attention mechanisms to process input data and isA: A Transformer model is a type of deep learning architecture introduced in the paper 
"Attention is All You Need." It uses self -attention mechanisms to process input data and is 
highly effective for tasks like language translation and text generation.4 | P a g e  
  
Transformer Architecture (Source – Wikipedia)  
Q: What is the difference between supervised and unsupervised learning in the context 
of Generative AI?  
A: In supervised learning, models are trained on labeled data, meaning each training example 
has an associated output label. In unsupervised learning, models learn patterns and structures 
from unlabeled data. Generative AI often uses unsupervised learning to  generate new data 
without explicit output labels.  
Q: Can you explain the concept of 'latent space' in Generative AI?  
A: Latent space refers to a lower -dimensional representation of data in which generative 
models, like GANs or VAEs, encode high -dimensional input data. Navigating this space 
allows the model to generate new, similar data by decoding points in the latent spac e. 
Q: What is the purpose of the self -attention mechanism in the Transformer model?  
A: The self -attention mechanism allows the Transformer model to weigh the importance ofQ: What is the purpose of the self -attention mechanism in the Transformer model?  
A: The self -attention mechanism allows the Transformer model to weigh the importance of 
different words in a sentence relative to each other. This helps the model understand context 
and relationships within the data, leading to more accurate predictions and generation.  
Q: What is a Variational Autoencoder (VAE)?  
A: A VAE is a type of generative model that learns to encode input data into a probabilistic 
latent space and then decodes it back to the original data space. Unlike traditional 
autoencoders, VAEs introduce a regularization term that forces the latent space to follow a 
known distribution, typically Gaussian.5 | P a g e  
  
VAE (Source - Wikipedia)  
Q: How does the Encoder -Decoder architecture work?  
A: The Encoder -Decoder architecture consists of two parts: the encoder, which processes the 
input and compresses it into a fixed -size context vector (latent space), and the decoder, which 
takes this context vector and generates the output. This architecture is commonly used in 
tasks like machine translation.  
Q: What are some common applications of Generative AI?  
A: Common applications include text generation (e.g., chatbots, content creation), image 
generation (e.g., deepfakes, art creation), music composition, data augmentation, drug 
discovery, and improving the quality of medical imaging.  
Q: How does a Recurrent Neural Network (RNN) differ from a Transformer in 
Generative AI tasks?  
A: RNNs process sequential data by maintaining a hidden state that captures information 
from previous steps. Transformers, on the other hand, use self -attention mechanisms toA: RNNs process sequential data by maintaining a hidden state that captures information 
from previous steps. Transformers, on the other hand, use self -attention mechanisms to 
process entire sequences in parallel, which makes them more efficient and better at  capturing 
long-range dependencies.  
Q: What is BERT, and how is it used in Generative AI?  
A: BERT (Bidirectional Encoder Representations from Transformers) is a pre -trained 
language model designed for understanding context in text by considering both the left and 
right surroundings. While BERT itself is not generative, its architecture can be ada pted for 
text generation tasks in models like GPT (Generative Pre -trained Transformer).  
Q: How does GPT differ from BERT?  
A: GPT (Generative Pre -trained Transformer) is designed primarily for text generation, using 
a unidirectional (left -to-right) approach. BERT, on the other hand, is designed for6 | P a g e  
 understanding and processing text by using a bidirectional approach. GPT generates coherent 
text, while BERT excels in tasks like question answering and text classification.  
Q: What is style transfer in the context of Generative AI?  
A: Style transfer is a technique in Generative AI that applies the style of one image (e.g., a 
painting) to the content of another image (e.g., a photograph). This is achieved by separating 
and recombining the content and style representations in the images using neural networks.  
Q: How can Generative AI be used in data augmentation?  
A: Generative AI can create synthetic data that resembles real data, which can be used to 
augment training datasets. This is especially useful in scenarios where collecting real data is 
expensive or impractical, helping to improve the performance of machine learning models by 
increasing data diversity.  
Q: What is transfer learning, and how is it applied in Generative AI?expensive or impractical, helping to improve the performance of machine learning models by 
increasing data diversity.  
Q: What is transfer learning, and how is it applied in Generative AI?  
A: Transfer learning involves using a pre -trained model on a new, related task. In Generative 
AI, models like GPT -3 are pre -trained on large corpora of text and can be fine -tuned for 
specific tasks (e.g., text summarization, translation) with relatively smal ler datasets.  
Q: What is a Deepfake?  
A: A Deepfake is a synthetic media, often a video or audio, created using Generative AI 
techniques, particularly GANs. It involves altering existing media or creating new media to 
make it appear authentic, often used to create realistic but fake representati ons of people.  
Q: How does an autoencoder work, and what is its purpose in Generative AI?  
A: An autoencoder consists of an encoder that compresses the input data into a lower -Q: How does an autoencoder work, and what is its purpose in Generative AI?  
A: An autoencoder consists of an encoder that compresses the input data into a lower -
dimensional latent space and a decoder that reconstructs the original data from this latent 
space. It is used for tasks like dimensionality reduction, anomaly detection, and  as a building 
block in generative models.  
Q: What is the role of loss functions in training GANs?  
A: Loss functions in GANs guide the training process of both the generator and the 
discriminator. The generator's loss measures how well it can fool the discriminator, while the 
discriminator's loss measures how well it can distinguish real data from fake da ta. Balancing 
these losses is crucial for stable training.  
Q: What is the importance of the "attention mechanism" in NLP tasks?  
A: The attention mechanism allows models to focus on relevant parts of the input sequence 
when making predictions. This is particularly important in NLP tasks for capturing contextualA: The attention mechanism allows models to focus on relevant parts of the input sequence 
when making predictions. This is particularly important in NLP tasks for capturing contextual 
dependencies and improving the quality of generated text.  
Q: What are some ethical concerns associated with Generative AI?  
7 | P a g e  
 A: Ethical concerns include the potential for misuse in creating fake content (deepfakes), 
intellectual property issues, bias in generated content, and the impact on privacy. Ensuring 
responsible use and developing techniques for detecting AI -generated conte nt are ongoing 
challenges.  
Q: How can Generative AI improve natural language understanding?  
A: Generative AI models like GPT -4, Gemini, Claude, Llama etc can generate coherent and 
contextually relevant text, which helps in building more advanced chatbots, improving 
machine translation, and creating better tools for text summarization and sentiment analysis.contextually relevant text, which helps in building more advanced chatbots, improving 
machine translation, and creating better tools for text summarization and sentiment analysis.  
Q: What is reinforcement learning, and is it used in Generative AI?  
A: Reinforcement learning involves training an agent to make decisions by rewarding desired 
actions and penalizing undesired ones. While not typically used in generative tasks, 
reinforcement learning can be combined with generative models in areas like game 
development and optimizing content generation strategies.  
Q: What is the significance of "zero -shot learning" in Generative AI?  
A: Zero -shot learning allows a model to make predictions for classes it has never seen during 
training by leveraging generalizable features learned from seen classes. This is significant in 
Generative AI for creating content or solving tasks without requirin g extensive labeled data 
for every possible category.  
 
Generative AIGenerative AI for creating content or solving tasks without requirin g extensive labeled data 
for every possible category.  
 
Generative AI  
Q: What is Generative AI and how does it differ from other types of AI?   
A: Generative AI refers to models that generate new data samples similar to the training data. 
Unlike discriminative models, which classify input data into categories, generative models 
can create new instances that resemble the input data. Examples include text generation, 
image synthesis, and music composition.  
Q: Can you explain the difference between a Generative Adversarial Network (GAN) 
and a Variational Autoencoder (VAE)?  
A: GANs consist of two networks, a generator and a discriminator, that compete against each 
other to produce realistic data. The generator creates data samples, while the discriminator 
evaluates their authenticity. VAEs, on the other hand, encode data into a  latent space andother to produce realistic data. The generator creates data samples, while the discriminator 
evaluates their authenticity. VAEs, on the other hand, encode data into a  latent space and 
decode it back to reconstruct the data, focusing on generating data by learning the underlying 
distribution.  
8 | P a g e  
  
GAN (Source Geek sForGeeks)  
 
VAE  (Source  - Wikipedia ) 
 
Q: What are some common applications of Generative AI?  
A: Common applications include image and video synthesis, text generation, music and art 
creation, drug discovery, and data augmentation for training other machine learning models.  
Q: How does the training process of a GAN work?   
A: Training a GAN involves a two -step process: the generator creates fake data samples, and 
the discriminator evaluates them against real data samples. The generator aims to produce 
more realistic samples to fool the discriminator, while the discriminator ai ms to improve its9 | P a g e  
 ability to distinguish real from fake data. This adversarial process continues until the 
generator produces highly realistic samples.  
Q: What challenges are associated with training Generative AI models?  
A: Challenges include mode collapse (where the generator produces limited variations of 
data), ensuring training stability, and the need for large amounts of data and computational 
resources.  
 
Discriminative AI  
Q: What is Discriminative AI and how does it differ from Generative AI?   
A: Discriminative AI models focus on classifying input data into predefined categories. They 
learn the boundary between classes based on the training data. Unlike generative models, 
discriminative models do not generate new data; they only classify existing data.  
Q: Can you give an example of a discriminative model and its application?  
A: An example of a discriminative model is a Support Vector Machine (SVM), whichQ: Can you give an example of a discriminative model and its application?  
A: An example of a discriminative model is a Support Vector Machine (SVM), which 
classifies data by finding the hyperplane that best separates different classes. Applications 
include image classification, spam detection, and medical diagnosis.  
Q: How does a discriminative model learn from data?  
A: Discriminative models learn by optimizing a loss function that measures the difference 
between predicted and actual labels in the training data. Techniques like gradient descent are 
used to minimize this loss and improve the model's accuracy.  
Q: What are the key differences in the training objectives of generative and 
discriminative models?  
A: The training objective of generative models is to learn the underlying data distribution to 
generate new samples, while discriminative models aim to learn the decision boundary that 
separates different classes.generate new samples, while discriminative models aim to learn the decision boundary that 
separates different classes.  
Q: What are some advantages of using discriminative models over generative models?  
A: Discriminative models typically require less computational resources, have simpler 
training processes, and often achieve higher accuracy in classification tasks compared to 
generative models.  
General Questions on Generative and Discriminative AI  
Q: How can generative and discriminative models complement each other in a machine 
learning pipeline?  
10 | P a g e  
 A: Generative models can be used for data augmentation to create additional training 
samples, which can improve the performance of discriminative models. Additionally, 
generative models can help in understanding the data distribution, which can inform the 
design and training of discriminative models.  
 
 
 
Q: Can you discuss a scenario where both generative and discriminative models are 
used together?design and training of discriminative models.  
 
 
 
Q: Can you discuss a scenario where both generative and discriminative models are 
used together?  
A: In semi -supervised learning, generative models can be used to generate synthetic data to 
augment a small labeled dataset, and then a discriminative model can be trained on this 
augmented dataset to improve classification performance.  
Q: What are the trade -offs between using generative and discriminative models?  
A: Generative models can provide more insights into the data and generate new data, but they 
are often more complex and computationally intensive. Discriminative models are usually 
simpler, faster to train, and can achieve higher accuracy in classification t asks, but they do 
not generate new data.  
Q: How do generative models handle unsupervised learning tasks differently from 
discriminative models?  
A: Generative models can learn from unlabeled data by modeling the data distribution andQ: How do generative models handle unsupervised learning tasks differently from 
discriminative models?  
A: Generative models can learn from unlabeled data by modeling the data distribution and 
generating new samples, while discriminative models require labeled data to learn the 
decision boundary between classes.  
 
https://www.researchgate.net/figure/A -simple-illustration -of-how-one-can-use-discriminative -vs-generative -models-The-former_fig1_341478640  
11 | P a g e  
 Transformer Architecture  
Q: What is the Transformer architecture and why is it significant in Generative AI?  
A: The Transformer architecture is a deep learning model introduced by Vaswani et al. in 
2017, designed to handle sequential data with a mechanism called self -attention. It is 
significant in Generative AI because it efficiently processes long -range dependenc ies in data, 
enabling high -quality text generation, translation, and other language -related tasks.significant in Generative AI because it efficiently processes long -range dependenc ies in data, 
enabling high -quality text generation, translation, and other language -related tasks.  
Q: Can you explain the self -attention mechanism in Transformers?  
A: Self-attention allows the model to weigh the importance of different words in a sequence 
when generating an output. For each word, the mechanism computes attention scores relative 
to all other words, helping the model understand contextual relationships. This is crucial for 
capturing the nuances in language data.  
Q: What are the main components of the Transformer architecture?  
A: The main components are the encoder and decoder stacks. Each stack consists of multiple 
layers of self -attention and feed -forward neural networks, along with layer normalization and 
residual connections. The encoder processes input sequences, and the deco der generates 
output sequences.  
Q: How does positional encoding work in Transformers?residual connections. The encoder processes input sequences, and the deco der generates 
output sequences.  
Q: How does positional encoding work in Transformers?  
A: Positional encoding adds information about the position of each word in the sequence 
because the Transformer architecture does not inherently understand word order. This is 
achieved by adding sine and cosine functions of different frequencies to the input  
embeddings, allowing the model to incorporate positional information.  
Q: What advantages do Transformers have over traditional RNNs and LSTMs?  
A: Transformers address the limitations of RNNs and LSTMs, such as difficulty in capturing 
long-range dependencies and slow training due to sequential data processing. Transformers 
use self -attention mechanisms to process entire sequences in parallel, improv ing efficiency 
and performance.  
Q: Can you describe the role of multi -head attention in the Transformer architecture?and performance.  
Q: Can you describe the role of multi -head attention in the Transformer architecture?  
A: Multi -head attention allows the model to focus on different parts of the input sequence 
simultaneously. By splitting the input into multiple heads, each with its own self -attention 
mechanism, the model can capture various aspects of the relationships betw een words, 
enhancing its ability to understand complex patterns.  
Q: How does the Transformer architecture handle the task of machine translation?  
A: In machine translation, the encoder processes the source language sentence, generating 
context -rich representations. The decoder then uses these representations, along with 
12 | P a g e  
 previously generated words, to produce the target language sentence. Attention mechanisms 
help align source and target sentences.  
Q: What is the significance of the "Attention is All You Need" paper?  
A: The paper "Attention is All You Need" by Vaswani et al. introduced the TransformerQ: What is the significance of the "Attention is All You Need" paper?  
A: The paper "Attention is All You Need" by Vaswani et al. introduced the Transformer 
architecture and demonstrated that self -attention mechanisms could replace recurrent and 
convolutional layers in sequence modeling tasks. This breakthrough significantly im proved 
performance and efficiency in NLP tasks.  
Q: How are Transformers used in language models like GPT, Genmini, Claude. Llama etc?  
A: Transformers serve as the backbone for large language models like GPT -3. These models 
use a stack of Transformer decoder layers to generate text by predicting the next word in a 
sequence based on the context provided by previous words.  
Q: What are some challenges associated with training Transformer models?  
A: Challenges include the high computational and memory requirements due to parallel 
processing of large sequences, managing overfitting with large model sizes, and ensuring 
efficient use of data to prevent long training times.processing of large sequences, managing overfitting with large model sizes, and ensuring 
efficient use of data to prevent long training times.  
Q: How can you address the issue of long sequence processing in Transformers?  
A: Techniques like sparse attention mechanisms, memory -augmented networks, and 
Transformer variants like Longformer and Reformer can be used to efficiently process longer 
sequences by reducing computational complexity and memory usage.  
Q: Explain how the encoder and decoder work together in the Transformer architecture using 
an example.  
A: In a translation task, the encoder processes the sentence "The cat is on the mat" and 
generates context -rich embeddings. The decoder then takes these embeddings and generates 
the translated sentence "Le chat est sur le tapis," using attention mechanisms t o align the 
words correctly.  
Q: What is the role of residual connections in the Transformer architecture?the translated sentence "Le chat est sur le tapis," using attention mechanisms t o align the 
words correctly.  
Q: What is the role of residual connections in the Transformer architecture?  
A: Residual connections help mitigate the vanishing gradient problem and enable deeper 
networks by allowing gradients to flow more easily through the network. They also stabilize 
training and improve convergence rates.  
Q: How do Transformers handle the challenge of data parallelism?  
A: Transformers process entire sequences in parallel using self -attention mechanisms, which 
allows for efficient data parallelism. This significantly speeds up training and inference 
compared to sequential models like RNNs.  
Q: Describe an application of Transformers in a non -textual domain.  
13 | P a g e  
 A: Transformers can be applied to image processing tasks such as image classification and 
segmentation. Vision Transformers (ViTs) split an image into patches and process them13 | P a g e  
 A: Transformers can be applied to image processing tasks such as image classification and 
segmentation. Vision Transformers (ViTs) split an image into patches and process them 
similarly to sequences of words, leveraging self -attention to capture spatial rela tionships.  
Q: How do layer normalization and dropout contribute to the performance of Transformers?  
A: Layer normalization stabilizes the training process by normalizing the input to each sub -
layer, while dropout helps prevent overfitting by randomly zeroing out a fraction of the 
connections during training, enhancing the model's generalization capabilitie s. 
Q: What are some recent advancements in Transformer architectures?  
A: Recent advancements include BERT (Bidirectional Encoder Representations from 
Transformers), which uses a bidirectional approach to understand context from both 
directions, and GPT (Generative Pre -trained Transformer) models, which are scaled -upTransformers), which uses a bidirectional approach to understand context from both 
directions, and GPT (Generative Pre -trained Transformer) models, which are scaled -up 
versions w ith trillions  of parameters for superior language generation.  
Q: How do Transformers manage context for very long texts?  
A: Techniques like segment -level recurrence in Transformer -XL, hierarchical attention in 
models like BigBird, and local -global attention patterns in Longformer help manage long -
context dependencies by breaking down the text into manageable chunks while retai ning 
contextual information.  
Q: How do you handle the scalability issues in training large Transformer models?  
A: Scalability issues can be addressed by distributed training across multiple GPUs, mixed -
precision training to reduce memory usage, model parallelism, and using efficient 
implementations like NVIDIA's Megatron or DeepSpeed from Microsoft.precision training to reduce memory usage, model parallelism, and using efficient 
implementations like NVIDIA's Megatron or DeepSpeed from Microsoft.  
Q: Explain the impact of Transformer models on the field of Natural Language Processing 
(NLP).  
A: Transformer models have revolutionized NLP by setting new benchmarks in various tasks 
such as translation, summarization, and question answering. Their ability to handle context 
and dependencies more effectively than previous models has led to significant  improvements 
in performance and opened new research avenues.  
 
Large Language Models (LLMs)  
Q: What is a Large Language Model (LLM)?  
A: A Large Language Model (LLM) is a type of artificial intelligence model that uses deep 
learning techniques to understand, generate, and manipulate human language. Examples 
include GPT -3, GPT -4, and BERT.  
Q: How do LLMs like GPT -3 and GPT -4 work?  
14 | P a g e  
 A: LLMs use transformer architectures with attention mechanisms to process input text andinclude GPT -3, GPT -4, and BERT.  
Q: How do LLMs like GPT -3 and GPT -4 work?  
14 | P a g e  
 A: LLMs use transformer architectures with attention mechanisms to process input text and 
generate coherent, contextually relevant output. They are pre -trained on vast datasets and can 
be fine -tuned for specific tasks.  
Q: What are the applications of LLMs?  
A: Applications of LLMs include text generation, translation, summarization, question 
answering, sentiment analysis, and conversational agents.  
Q: What is the transformer architecture?  
A: The transformer architecture is a neural network design that relies on self -attention 
mechanisms to weigh the importance of different parts of the input data, enabling efficient 
parallel processing and improved context understanding.  
Q: What is attention mechanism in transformers?  
A: The attention mechanism allows the model to focus on relevant parts of the input 
sequence when generating output, improving the model's ability to capture dependencies andA: The attention mechanism allows the model to focus on relevant parts of the input 
sequence when generating output, improving the model's ability to capture dependencies and 
context.  
Q: What is the difference between GPT and BERT?  
A: GPT is a unidirectional transformer model designed for generative tasks, while BERT is a 
bidirectional transformer model focused on understanding context for tasks like question 
answering and classification.  
Q: How is the training data for LLMs typically collected?  
A: Training data for LLMs is usually collected from large -scale text corpora, including 
books, articles, websites, and other publicly available text sources.  
Q: What are the ethical concerns associated with LLMs?  
A: Ethical concerns include the potential for generating biased or harmful content, misuse for 
disinformation, and issues related to privacy and data security.  
Q: How do LLMs handle out -of-vocabulary words?  
A: LLMs use subword tokenization methods, such as Byte Pair Encoding (BPE) ordisinformation, and issues related to privacy and data security.  
Q: How do LLMs handle out -of-vocabulary words?  
A: LLMs use subword tokenization methods, such as Byte Pair Encoding (BPE) or 
WordPiece, to break down out -of-vocabulary words into known subwords or characters.  
Q: What is transfer learning in the context of LLMs?  
A: Transfer learning involves pre -training an LLM on a large dataset and then fine -tuning it 
on a smaller, task -specific dataset to adapt it to specific applications.  
 
 
15 | P a g e  
 Embedding Models  
Q: What are word embeddings?   
A: Word embeddings are dense vector representations of words that capture their semantic 
meaning and relationships, enabling models to process text in a numerical form.  
Q: How are embeddings generated?   
A: Embeddings are generated using techniques like Word2Vec, GloVe, or through 
transformer -based models that learn context -dependent representations during training.  
Q: What is the purpose of embeddings in NLP?transformer -based models that learn context -dependent representations during training.  
Q: What is the purpose of embeddings in NLP?   
A: Embeddings enable models to understand and manipulate text by representing words and 
phrases as vectors in a continuous space, improving performance on various NLP tasks.  
Q: What is the difference between static and dynamic embeddings?   
A: Static embeddings, like Word2Vec and GloVe, provide a fixed representation for each 
word, while dynamic embeddings, like those from BERT, adjust based on the context in 
which the word appears.  
Q: What are contextual embeddings?  
A: Contextual embeddings are dynamic embeddings that capture the meaning of words based 
on their surrounding context, improving understanding and accuracy in NLP tasks.  
Q: How do transformer models generate embeddings?  
A: Transformer models generate embeddings through multiple layers of self -attention and 
feed-forward networks, capturing rich, context -dependent representations of text.A: Transformer models generate embeddings through multiple layers of self -attention and 
feed-forward networks, capturing rich, context -dependent representations of text.  
Q: What is the role of position embeddings in transformers?  
A: Position embeddings provide information about the position of each token in the input 
sequence, helping the model understand the order and structure of the data.  
Q: How are sentence embeddings different from word embeddings?  
A: Sentence embeddings represent entire sentences or phrases as vectors, capturing the 
overall meaning, while word embeddings represent individual words.  
Q: What are the applications of sentence embeddings?  
A: Applications include sentence similarity, paraphrase detection, document retrieval, and 
clustering.  
Q: How can embeddings be used for text classification?  
16 | P a g e  
 A: Embeddings transform text into vectors that can be fed into machine learning models,clustering.  
Q: How can embeddings be used for text classification?  
16 | P a g e  
 A: Embeddings transform text into vectors that can be fed into machine learning models, 
such as neural networks, for classification tasks like sentiment analysis or topic 
categorization.  
 
Retrieval -Augmented Generation (RAG)  
Q: What is Retrieval -Augmented Generation (RAG)?  
A: RAG is a framework that combines retrieval -based methods with generative models to 
improve the accuracy and relevance of generated content by incorporating external 
information.  
Q: How does RAG work?  
A: RAG retrieves relevant documents or passages from a knowledge base and uses this 
information to guide the generation process, enhancing the output with contextually accurate 
details.  
Q: What are the components of a RAG model?  
A: A RAG model typically consists of a retriever, which fetches relevant information, and a 
generator, which uses the retrieved information to produce the final output.A: A RAG model typically consists of a retriever, which fetches relevant information, and a 
generator, which uses the retrieved information to produce the final output.  
Q: What are the benefits of using RAG?  
A: Benefits include improved accuracy, relevance, and informativeness of generated content, 
as the model can access and incorporate external knowledge.  
Q: What are the challenges associated with RAG?  
A: Challenges include the complexity of integrating retrieval and generation components, 
handling large -scale knowledge bases, and ensuring the retrieved information is correctly 
utilized.  
Q: How can RAG be applied to question answering?  
A: In question answering, RAG retrieves relevant documents or passages and uses them to 
generate precise and contextually accurate answers to the given questions.  
Q: What datasets are commonly used for training RAG models?  
A: Common datasets include Natural Questions, TriviaQA, and WebQuestions, whichQ: What datasets are commonly used for training RAG models?  
A: Common datasets include Natural Questions, TriviaQA, and WebQuestions, which 
provide large collections of question -answer pairs and related documents.  
Q: How does RAG improve over traditional generative models?   
A: RAG improves generative models by providing access to external, up -to-date information, 
which helps generate more accurate and contextually relevant responses.  
17 | P a g e  
 Q: What role does the retriever play in a RAG model?   
A: The retriever fetches the most relevant documents or passages from a knowledge base, 
providing the generator with contextually useful information to enhance the output.  
Q: How can you evaluate the performance of a RAG model?  
A: Performance can be evaluated using metrics such as BLEU, ROUGE, and Exact Match for 
generation quality, as well as retrieval -specific metrics like Precisio n and Recall.  
Q: What is iterative refinement in RAG?generation quality, as well as retrieval -specific metrics like Precisio n and Recall.  
Q: What is iterative refinement in RAG?  
A: A technique where the model repeatedly retrieves and generates, refining its output based 
on intermediate results.  
Q: How can RAG systems be evaluated?  
A: Through metrics like relevance, coherence, factual accuracy, and comparison with human -
generated responses.  
Q: What is the role of attention mechanisms in RAG?  
A: They help the generator focus on the most relevant parts of retrieved information during 
text generation.  
Q: How can RAG be adapted for domain -specific applications?  
A: By using specialized knowledge bases, fine -tuning on domain data, and customizing 
retrieval strategies.  
Q: What are some challenges in scaling RAG systems?  
A: Managing large knowledge bases, reducing latency, and maintaining accuracy with 
increased information volume.  
Q: How can RAG be used to improve AI model transparency?A: Managing large knowledge bases, reducing latency, and maintaining accuracy with 
increased information volume.  
Q: How can RAG be used to improve AI model transparency?  
A: By providing sources for generated information, allowing users to verify the origin of the 
model's knowledge.  
 
LLM Fine Tuning  
Q: What is fine -tuning in the context of LLMs?  
A: Fine-tuning involves adapting a pre -trained LLM to a specific task or dataset by 
continuing its training on task -specific data, improving performance on that particular task.  
Q: Why is fine -tuning important for LLMs?  
18 | P a g e  
 A: Fine-tuning allows LLMs to specialize and improve performance on specific tasks, 
making them more effective and accurate for targeted applications.  
Q: What are the typical steps involved in fine -tuning an LLM?  
A: Steps include preparing the task -specific dataset, selecting appropriate hyperparameters, 
training the model on the new data, and evaluating its performance.A: Steps include preparing the task -specific dataset, selecting appropriate hyperparameters, 
training the model on the new data, and evaluating its performance.  
Q: What is the difference between pre -training and fine -tuning?  
A: Pre-training involves training a model on a large, diverse dataset to learn general language 
representations, while fine -tuning adapts the pre -trained model to specific tasks using 
smaller, task -specific datasets.  
Q: How does the size of the fine -tuning dataset affect the model?  
A: Larger fine -tuning datasets can lead to better performance and generalization, but even 
small datasets can significantly improve task -specific accuracy due to the pre -trained model's 
foundational knowledge.  
Q: What are some common challenges in fine -tuning LLMs?  
A: Challenges include overfitting to the fine -tuning dataset, computational resource 
requirements, and ensuring the model maintains generalization capabilities.A: Challenges include overfitting to the fine -tuning dataset, computational resource 
requirements, and ensuring the model maintains generalization capabilities.  
Q: What techniques can be used to prevent overfitting during fine -tuning?   
A: Techniques include using regularization methods, dropout, early stopping, and data 
augmentation to ensure the model does not overfit to the fine -tuning dataset.  
Q: How can you assess the success of fine -tuning?  
A: Success can be assessed using performance metrics relevant to the task, such as accuracy, 
F1 score, BLEU score, and human evaluation for tasks like text generation.  
Q: What is domain adaptation in the context of LLM fine -tuning?  
A: Domain adaptation involves fine -tuning an LLM to perform well in a specific domain or 
field, such as medical text or legal documents, by training on domain -specific data.  
Q: How do you handle catastrophic forgetting during fine -tuning?field, such as medical text or legal documents, by training on domain -specific data.  
Q: How do you handle catastrophic forgetting during fine -tuning?   
A: Catastrophic forgetting can be mitigated by using techniques such as regularization, multi -
task learning, or interleaving fine -tuning data with samples from the original pre -training 
data.  
 
Misc  Topics in Generative AI  
19 | P a g e  
 Q: What is zero -shot learning in LLMs?   
A: Zero -shot learning enables an LLM to perform tasks it has not been explicitly trained on 
by leveraging its general knowledge and understanding from pre -training.  
Q: What is few -shot learning in LLMs?  
A: Few-shot learning involves adapting an LLM to a new task with only a few examples, 
demonstrating the model's ability to generalize from limited data.  
Q: What are foundation models?  
A: Foundation models are large pre -trained models that serve as a base for variousdemonstrating the model's ability to generalize from limited data.  
Q: What are foundation models?  
A: Foundation models are large pre -trained models that serve as a base for various 
downstream tasks through fine -tuning, leveraging their broad, general -purpose capabilities.  
Q: How is federated learning used in the context of LLMs?   
A: Federated learning involves training LLMs across multiple decentralized devices while 
keeping data local, enhancing privacy and enabling collaborative learning without sharing 
raw data.  
Q: What are the benefits of using federated learning with LLMs?  
A: Benefits include improved privacy, reduced data transfer, and the ability to leverage 
diverse data sources without centralizing data storage.  
Q: What is the significance of prompt engineering?  
A: Prompt engineering involves designing effective input prompts to guide LLMs in 
generating the desired output, optimizing model performance for specific tasks.  
Q: How can LLMs be used for code generation?generating the desired output, optimizing model performance for specific tasks.  
Q: How can LLMs be used for code generation?   
A: LLMs can generate code snippets or entire programs by understanding natural language 
descriptions of the desired functionality, aiding in software development and automation.  
Q: What is the role of reinforcement learning in fine -tuning LLMs?   
A: Reinforcement learning can fine -tune LLMs by optimizing for specific rewards, such as 
generating more relevant or accurate responses in conversational agents.  
Q: What are some recent advancements in LLMs?  
A: Recent advancements include improvements in model architectures, training techniques 
like self -supervised learning, and better handling of long -context sequences.  
Q: How do you ensure the ethical use of LLMs?   
20 | P a g e  
 A: Ensuring ethical use involves implementing guidelines for fairness, transparency, and 
accountability, as well as actively monitoring and mitigating biases and potential misuse of20 | P a g e  
 A: Ensuring ethical use involves implementing guidelines for fairness, transparency, and 
accountability, as well as actively monitoring and mitigating biases and potential misuse of 
the models.  
 
Prompt Engineering  
Q: What is prompt engineering in the context of language models?  
A: Prompt engineering involves designing and optimizing input prompts to guide language 
models (LMs) like GPT -3 or GPT -4 to generate desired outputs. For example, asking GPT -4 
"Write a short story about a brave knight" helps generate a coherent and relevant narrative.  
Q: Why is prompt engineering important for effective use of Language Models?   
A: Effective prompt engineering can significantly improve the relevance, accuracy, and 
creativity of the model's outputs by providing clear and structured guidance. For example, 
specifying "Generate a formal letter of recommendation" instead of a vague "Writ e a letter" 
leads to more appropriate content.specifying "Generate a formal letter of recommendation" instead of a vague "Writ e a letter" 
leads to more appropriate content.  
Q: What is a basic structure of a prompt for an Language Model?  
A: A basic prompt should include context, instructions, and a desired output format. For 
instance, "Write a summary of the following article: [insert article text here]" provides clear 
guidance.  
Q: What are some techniques for crafting effective prompts?  
A: Techniques include specifying the task clearly, providing examples, using role -playing 
scenarios, and setting the tone. For example, "As a travel guide, describe the best tourist 
attractions in Paris."  
Q: How does role -playing enhance prompt effectiveness?  
A: Role -playing helps the model adopt a specific perspective, leading to more relevant and 
targeted responses. For example, "As a financial advisor, give tips on saving for retirement."  
Q: How do example -based prompts improve model responses?targeted responses. For example, "As a financial advisor, give tips on saving for retirement."  
Q: How do example -based prompts improve model responses?  
A: Providing examples helps the model understand the expected output format and content. 
For instance, "Translate the following sentence into French: 'Hello, how are you?' Example: 
'Bonjour, comment ça va?'"  
Q: How can you handle ambiguity in prompts?   
A: To reduce ambiguity, be specific and clear about the task requirements. For example, 
instead of "Write a report," specify "Write a one -page report summarizing the benefits of 
renewable energy."  
21 | P a g e  
 Q: How does the length of a prompt affect model performance?  
A: While longer prompts can provide more context, they may also introduce complexity. It's 
important to balance detail with clarity. For instance, a concise but clear prompt like 
"Summarize the following text in 50 words" is effective.  
Q: How do you set the tone in a prompt?important to balance detail with clarity. For instance, a concise but clear prompt like 
"Summarize the following text in 50 words" is effective.  
Q: How do you set the tone in a prompt?  
A: The tone can be set by specifying the desired style or formality. For example, "Write a 
friendly and informal email to invite a friend to a party."  
Q: What is iterative prompt refinement?  
A: Iterative prompt refinement involves testing and tweaking prompts to improve the model's 
outputs. For example, adjusting "Describe a product" to "Describe the key features of the new 
smartphone model."  
Q: What are prompt templates and how are they used?  
A: Prompt templates are predefined structures for common tasks. They help ensure 
consistency and efficiency. For example, using a template like "Dear [Recipient], I am 
writing to [Purpose]."  
Q: How do you evaluate the effectiveness of a prompt?  
A: Evaluation involves checking the relevance, accuracy, and coherence of the model'swriting to [Purpose]."  
Q: How do you evaluate the effectiveness of a prompt?  
A: Evaluation involves checking the relevance, accuracy, and coherence of the model's 
output. For example, comparing the responses generated by different prompts for the same 
task to see which is more appropriate.  
Q: How can you avoid introducing bias in prompts?  
A: Avoid bias by using neutral and inclusive language, and by testing prompts with diverse 
datasets. For example, ensuring a prompt for job application advice does not favour a specific 
demographic.  
Q: How can prompts encourage creative outputs from LMs?  
A: Encouraging creativity involves using open -ended and imaginative prompts. For example, 
"Write a sci -fi story set in the year 3000."  
Q: How do you tailor prompts for specific domains (e.g., legal, medical)?  
A: Tailoring prompts involves using domain -specific terminology and context. For example, 
"As a legal advisor, summarize the key points of this contract."A: Tailoring prompts involves using domain -specific terminology and context. For example, 
"As a legal advisor, summarize the key points of this contract."  
Q: What are common pitfalls in prompt engineering?  
A: Pitfalls include being too vague, overly complex, or biased. For instance, a vague prompt 
like "Write about technology" can lead to unfocused outputs.  
22 | P a g e  
 Q: What are conditional prompts and how are they used?  
A: Conditional prompts set specific conditions or scenarios. For example, "If you were an 
astronaut on Mars, describe your daily routine."  
Q: What is multi -turn prompting?  
A: Multi -turn prompting involves a sequence of prompts to build on previous responses. For 
example, first asking "Describe the plot of a novel," then "Outline the main character's 
journey."  
Q: How can pre -trained prompts be leveraged in prompt engineering?  
A: Pre-trained prompts from model documentation or community resources can be adaptedjourney."  
Q: How can pre -trained prompts be leveraged in prompt engineering?  
A: Pre-trained prompts from model documentation or community resources can be adapted 
for specific tasks. For instance, using OpenAI's example prompts as a starting point.  
Q: How do you handle unexpected or irrelevant outputs from a prompt?   
A: Refine the prompt to be more specific and test iteratively. For example, if the prompt 
"Describe a holiday destination" results in irrelevant information, adjust to "Describe the best 
tourist attractions in Tokyo."  
Q: How can you craft a prompt for text summarization?  
A: Use clear instructions and length constraints. For example, "Summarize the following 
article in 100 words."  
Q: How can prompts be used for data augmentation in NLP tasks?   
A: Prompts can generate synthetic data to augment training datasets. For instance, generating 
additional examples of customer service interactions using prompts.  
Q: What is adaptive prompting?A: Prompts can generate synthetic data to augment training datasets. For instance, generating 
additional examples of customer service interactions using prompts.  
Q: What is adaptive prompting?  
A: Adaptive prompting involves dynamically adjusting prompts based on intermediate 
outputs. For example, if an initial prompt leads to incomplete information, a follow -up 
prompt seeks clarification.  
Q: How is prompt engineering used in interactive applications like chatbots?  
A: Prompts guide the chatbot's responses to maintain coherence and relevance. For example, 
structuring prompts to handle multi -turn conversations effectively.  
Q: Provide a case study example of an effective prompt for content generation .  
A: In content marketing, a prompt like "Write a blog post on the benefits of remote work, 
focusing on productivity and work -life balance" yields focused and relevant content that 
meets marketing objectives.  
Q: Why is clarity important when designing prompts?  
23 | P a g efocusing on productivity and work -life balance" yields focused and relevant content that 
meets marketing objectives.  
Q: Why is clarity important when designing prompts?  
23 | P a g e  
 A: Clarity ensures that the model understands the task requirements accurately. For example, 
instead of "Write an article," a clearer prompt would be "Write a 500 -word article on 
renewable energy sources."  
Q: How do you tailor prompts to the complexity of the task?  
A: Prompts should provide sufficient guidance for the task's complexity level. For instance, a 
more complex task like "Generate code for a neural network architecture" requires a detailed 
prompt compared to "Summarize a news article."  
Q: Why is providing context important in prompts?  
A: Context helps the model understand the task's purpose and audience. For example, "As a 
travel blogger, describe your recent trip to Italy" provides context for the narrative style and 
content.  
Q: How do you incorporate constraints into prompts?travel blogger, describe your recent trip to Italy" provides context for the narrative style and 
content.  
Q: How do you incorporate constraints into prompts?   
A: Constraints ensure that the model produces outputs within specific boundaries. For 
example, "Write a tweet promoting a new product in 280 characters or less" sets a character 
limit constraint.  
Q: How do you balance flexibility and guidance in prompts?  
A: Prompts should offer enough flexibility for creativity while providing clear guidance. For 
example, "Write a short story with a surprise ending" offers flexibility in the narrative while 
guiding the story structure.  
Q: How do you structure multi -part prompts effectively?  
A: Multi -part prompts should clearly delineate each part to avoid confusion. For example, 
"Part 1: Describe the setting. Part 2: Introduce the main characters. Part 3: Outline the 
conflict."  
Q: How do you ensure prompts align with the desired outputs?"Part 1: Describe the setting. Part 2: Introduce the main characters. Part 3: Outline the 
conflict."  
Q: How do you ensure prompts align with the desired outputs?  
A: Prompts should clearly articulate the expected format and content of the output. For 
example, "Generate a product review with pros and cons listed in bullet points" specifies the 
output format.  
Q: Why is iterative refinement important in prompt design?  
A: Iterative refinement allows for fine -tuning prompts based on model performance and 
feedback. For example, refining a prompt based on initial model outputs to achieve more 
accurate responses.  
Q: How do you test prompts with diverse inputs?   
24 | P a g e  
 A: Testing prompts with a variety of input examples helps ensure robustness and 
generalization. For example, testing a translation prompt with sentences of varying 
complexity and languages.  
Q: How does prompt design impact user experience?generalization. For example, testing a translation prompt with sentences of varying 
complexity and languages.  
Q: How does prompt design impact user experience?  
A: Well -designed prompts enhance user experience by providing clear instructions and 
achieving desired outcomes efficiently. For example, a user -friendly chatbot prompt leads to 
quicker and more accurate responses.  
Q: How do you anticipate model responses when designing prompts?  
A: Understanding the model's capabilities and limitations helps craft prompts that elicit 
desired responses. For example, designing a prompt that accounts for potential biases or 
inaccuracies in the model's output.  
Q: How do you address ambiguity in prompt design?  
A: Clarifying instructions and providing examples can help reduce ambiguity in prompts. For 
example, specifying a range for numerical inputs or providing context for ambiguous terms.  
Q: How can iterative prompt design optimize model performance?example, specifying a range for numerical inputs or providing context for ambiguous terms.  
Q: How can iterative prompt design optimize model performance?  
A: Iteratively refining prompts based on model feedback improves prompt effectiveness over 
time. For example, adjusting the level of detail or complexity based on initial model 
responses.  
Q: How do you adapt prompts for different model architectures?  
A: Prompts should be tailored to leverage the strengths and nuances of specific model 
architectures. For example, structuring a prompt differently for a transformer -based model 
like GPT -3 compared to a recurrent neural network.  
Q: How does providing feedback on model responses inform prompt design?  
A: Analyzing model outputs and user feedback helps refine prompts to better align with 
desired outcomes. For example, adjusting a prompt based on common errors or 
misunderstandings in model responses.  
Q: How do you verify that a prompt is understandable to the model?desired outcomes. For example, adjusting a prompt based on common errors or 
misunderstandings in model responses.  
Q: How do you verify that a prompt is understandable to the model?  
A: Testing prompts with diverse inputs and analyzing model responses ensures 
understandability. For example, evaluating whether the model produces relevant outputs 
consistent with the prompt's intent.  
Q: How can transfer learning inform prompt design?  
A: Leveraging pre -trained models and transfer learning techniques can inform prompt design 
for specific tasks. For example, adapting prompts based on prompts that have been successful 
in similar domains.  
25 | P a g e  
 Q: How does collaborative prompt design enhance prompt effectiveness?  
A: Collaborative prompt design involves input from domain experts, users, and data scientists 
to ensure prompts are well -suited for the task. For example, involving subject matter experts 
in crafting prompts for specialized domains like healthcare or finance .to ensure prompts are well -suited for the task. For example, involving subject matter experts 
in crafting prompts for specialized domains like healthcare or finance . 
Q: How do you address bias and fairness considerations in prompt design?   
A: Careful crafting of prompts and testing with diverse datasets help mitigate bias and ensure 
fairness. For example, analyzing prompts for language or cultural biases and adjusting 
accordingly.  
 
One-Shot Prompting  
Q: What is one -shot prompting in the context of Generative AI?   
A: One-shot prompting involves providing a single example or prompt to a model to perform 
a task, requiring the model to generalize and generate outputs based on a minimal amount of 
information.  
Q: How does one -shot prompting differ from traditional prompt -based approaches?  
A: Unlike traditional prompt -based approaches that rely on multiple examples or structured 
prompts, one -shot prompting challenges models to generalize from a single instance, makingA: Unlike traditional prompt -based approaches that rely on multiple examples or structured 
prompts, one -shot prompting challenges models to generalize from a single instance, making 
it more efficient and adaptable to new tasks or domains.  
Q: What are the advantages of using one -shot prompting over traditional prompt -based 
approaches?   
A: One-shot prompting requires less data and human intervention, making it more scalable 
and efficient for generating content across diverse domains or languages.  
Q: What role does transfer learning play in enabling one -shot prompting?   
A: Transfer learning enables models pretrained on large datasets to extract relevant features 
and knowledge from a single prompt, leveraging prior learning to generate contextually 
relevant outputs.  
Q: What are some practical applications of one -shot prompting in Generative AI?  
A: Applications include language translation, text summarization, question answering, andrelevant outputs.  
Q: What are some practical applications of one -shot prompting in Generative AI?  
A: Applications include language translation, text summarization, question answering, and 
content generation tasks where input examples are limited or scarce.  
Q: What are some challenges associated with implementing one -shot prompting?  
A: Challenges may include ensuring model robustness and generalization across diverse 
tasks, domains, and languages, as well as addressing biases or limitations in the training data.  
 
26 | P a g e  
 Few-Shot Prompting  
Q: What is few -shot learning in the context of Generative AI?  
A: Few-shot learning involves training models with a small number of examples to perform 
tasks. For instance, providing only a few examples of poetry to a language model to generate 
new poems.  
Q: How does few -shot learning differ from traditional supervised learning?  
A: Few-shot learning requires fewer labeled examples compared to traditional supervisednew poems.  
Q: How does few -shot learning differ from traditional supervised learning?  
A: Few-shot learning requires fewer labeled examples compared to traditional supervised 
learning, making it more adaptable to new tasks or domains with limited data.  
Q: Can you explain the concept of meta -learning in few -shot learning?   
A: Meta -learning involves training a model to learn how to learn from limited data. For 
example, a meta -learning algorithm can enable a model to quickly adapt to new tasks with 
minimal examples.  
Q: What are some techniques used to implement few -shot learning?   
A: Techniques include meta -learning algorithms like MAML (Model -Agnostic Meta -
Learning) and transfer learning approaches such as fine -tuning pretrained models on few 
examples.  
 
Zero -Shot Prompting  
Q: What is zero -shot learning and how does it work in Generative AI?   
A: Zero -shot learning enables models to perform tasks without specific training examples byZero -Shot Prompting  
Q: What is zero -shot learning and how does it work in Generative AI?   
A: Zero -shot learning enables models to perform tasks without specific training examples by 
leveraging prior knowledge. For example, GPT -3 can translate languages it has never been 
trained on by understanding linguistic patterns.  
Q: How does zero -shot learning differ from few -shot learning?  
A: Zero -shot learning requires no training examples for a specific task, while few -shot 
learning uses a small number of examples. Zero -shot learning relies more on generalization.  
Q: What are some practical applications of zero -shot learning in Generative AI?  
A: Applications include machine translation, text summarization, and content generation in 
languages or domains with limited training data  
 
Chain of Thought Prompting  
Q: What is Chain of Thought Prompt Engineering in Generative AI?  
27 | P a g e  
 A: Chain of Thought Prompt Engineering involves crafting sequential prompts that buildChain of Thought Prompting  
Q: What is Chain of Thought Prompt Engineering in Generative AI?  
27 | P a g e  
 A: Chain of Thought Prompt Engineering involves crafting sequential prompts that build 
upon each other to guide the model through a series of interconnected thoughts or actions.  
Q: How does Chain of Thought Prompt Engineering differ from traditional prompt 
engineering approaches?   
A: Chain of Thought Prompt Engineering focuses on structuring prompts in a sequential 
manner to create a coherent narrative or logical progression of ideas, whereas traditional 
prompt engineering may involve standalone prompts for individual tasks.  
Q: Can you provide an example of how Chain of Thought Prompt Engineering can be 
applied in content generation tasks?   
A: Sure, for generating a story, the chain of prompts could start with an initial prompt like 
"Introduce the main character," followed by prompts like "Describe the setting," "IntroduceA: Sure, for generating a story, the chain of prompts could start with an initial prompt like 
"Introduce the main character," followed by prompts like "Describe the setting," "Introduce 
the conflict," "Detail the character's actions," and "Resolve the confli ct." 
Q: What are some key considerations when designing a chain of thought prompts?  
A: Considerations include maintaining coherence and consistency between prompts, ensuring 
a logical flow of ideas, and providing clear instructions for each step in the chain.  
Q: How can Chain of Thought Prompt Engineering be leveraged to guide multi -turn 
conversations or interactions?  
A: By structuring prompts as sequential steps, Chain of Thought Prompt Engineering can 
guide the model through a dialogue or interaction, ensuring that each turn builds upon the 
previous one to maintain coherence and relevance.  
Q: What role does context play in Chain of Thought Prompt Engineering?previous one to maintain coherence and relevance.  
Q: What role does context play in Chain of Thought Prompt Engineering?  
A: Contextual information provided in each prompt helps the model understand the 
progression of thoughts or actions and ensures that subsequent prompts are relevant and 
appropriate.  
Q: How do you ensure that the chain of thought prompts leads to desired outcomes or 
objectives?  
A: By carefully designing each prompt in the sequence to align with the overall goal or 
objective, and by iteratively refining the prompts based on model performance and user 
feedback.  
Q: What are some challenges associated with implementing Chain of Thought Prompt 
Engineering?  
A: Challenges may include maintaining coherence and relevance across multiple prompts, 
managing the complexity of the chain, and ensuring that each prompt effectively guides the 
model towards the desired outcome.  
 
28 | P a g e  
 Hybrid Prompting  
Q: What is Hybrid Prompting in the context of Generative AI?model towards the desired outcome.  
 
28 | P a g e  
 Hybrid Prompting  
Q: What is Hybrid Prompting in the context of Generative AI?  
A: Hybrid Prompting combines multiple prompt engineering techniques, such as using both 
structured prompts and open -ended prompts, to guide model behaviour and enhance output 
quality.  
Q: How does Hybrid Prompting leverage the strengths of different prompt engineering 
approaches?  
A: Hybrid Prompting integrates structured prompts for clarity and guidance with open -ended 
prompts for creativity and flexibility, allowing for a more nuanced and adaptable approach to 
content generation.  
Q: Can you provide an example of how Hybrid Prompting can be applied in text 
generation tasks?   
A: In a storytelling task, Hybrid Prompting could involve providing an initial structured 
prompt to set the scene and introduce characters, followed by open -ended prompts to allow 
the model to develop the narrative organically.prompt to set the scene and introduce characters, followed by open -ended prompts to allow 
the model to develop the narrative organically.  
Q: What are the advantages of using Hybrid Prompting over individual prompt 
engineering techniques?   
A: Hybrid Prompting offers the benefits of both structured and open -ended prompts, 
including clear guidance, context, and flexibility, leading to more diverse and high -quality 
outputs.  
Q: How do you determine the optimal balance between structured and open -ended 
prompts in Hybrid Prompting?  
A: The balance depends on the task requirements, desired output characteristics, and model 
capabilities. Experimentation and iterative refinement are key to finding the right balance.  
Q: What role does user feedback play in refining Hybrid Prompting strategies?  
A: User feedback helps identify areas where structured prompts may be too restrictive or 
open -ended prompts may lead to irrelevant outputs, guiding adjustments to the Hybrid 
Prompting approach.A: User feedback helps identify areas where structured prompts may be too restrictive or 
open -ended prompts may lead to irrelevant outputs, guiding adjustments to the Hybrid 
Prompting approach.  
Q: How can Hybrid Prompting be tailored to suit different types of content generation 
tasks?  
A: By customizing the mix of structured and open -ended prompts based on the specific 
objectives, constraints, and characteristics of each task, such as adjusting the level of 
guidance or flexibility as needed.  
Q: What are some challenges associated with implementing Hybrid Prompting?   
29 | P a g e  
 A: Challenges may include designing prompts that effectively balance structure and 
flexibility, managing the complexity of hybrid prompt sequences, and ensuring coherence 
and relevance in model outputs.  
Q: Can you explain how Hybrid Prompting can be used to address the trade -off 
between control and creativity in content generation?and relevance in model outputs.  
Q: Can you explain how Hybrid Prompting can be used to address the trade -off 
between control and creativity in content generation?  
A: Hybrid Prompting allows for a fine -tuned balance between providing guidance and 
allowing for creative exploration, enabling models to generate diverse and engaging content 
while maintaining control over the overall direction.  
Q: How do you evaluate the effectiveness of Hybrid Prompting strategies in improving 
model performance?  
A: Evaluation involves assessing the quality, diversity, and relevance of model outputs 
generated using Hybrid Prompting compared to other prompt engineering approaches, as well 
as gathering user feedback to inform further refinement.  
 
ReAct Prompting  
Q: What is the concept behind ReAct in Generative AI, and how does it leverage human 
cognitive processes?  
A: ReAct  is a method inspired by how humans learn and make decisions. It combinesQ: What is the concept behind ReAct in Generative AI, and how does it leverage human 
cognitive processes?  
A: ReAct  is a method inspired by how humans learn and make decisions. It combines 
reasoning and action in AI models. ReAct prompts these models to think through a problem 
and take actions. It's like giving the 
AI a task and asking it to figure out 
the best way to solve it. It can also 
look up information from places 
like Wikipedia to help with its 
decision -making.